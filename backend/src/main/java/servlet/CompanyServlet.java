package servlet;

import dao.CompanyDAO;
import dao.DepartmentDAO;
import dao.UserDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import resource.Company;
import resource.Department;
import resource.User;
import utils.DataSourceProvider;
import utils.ErrorMessage;

import javax.naming.NamingException;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;

public class CompanyServlet extends AbstractServlet{

  /**
   * Show company's dashboard or edit its profile
   *
   * @param req Incomig HTTP requuest
   * @param res Outgoing HTTP response that will be generated by servlet
   */
  @Override
  public void doGet(HttpServletRequest req, HttpServletResponse res)
    throws ServletException, IOException {

    String op = req.getRequestURI();
    op = op.substring(op.lastIndexOf(req.getContextPath()) +
                      req.getContextPath().length());

    HttpSession session = req.getSession();
    String email = (String) session.getAttribute("email");

    User user = null;
    Company company = null;
    List<Department> departs = null;

    try {
      UserDAO dao = new UserDAO(DataSourceProvider.getDataSource().getConnection());
      CompanyDAO cdao = new CompanyDAO(DataSourceProvider.getDataSource().getConnection());

      user = dao.getUserByEmail(email);
      dao.closeConnection();
      company = cdao.getCompanyByAdmin(user);
      cdao.closeConnection();
      DepartmentDAO depDao = new DepartmentDAO(DataSourceProvider.getDataSource().getConnection());
      departs = depDao.getDepartmentsByCompany(company);
      depDao.closeConnection();
    } catch(SQLException | NamingException e) {
      writeErrorGuiPage(res,ErrorMessage.INTERNAL_ERROR);
    }

    switch (op){
    case "/company":
      req.setAttribute("company", company);
      req.setAttribute("departs", departs);
      req.getRequestDispatcher("/jsp/company/index.jsp")
      .forward(req, res);
      break;

    case "/company/profile":
      showProfile(req, res, company);
      break;
    default:
      writeErrorGuiPage(res, ErrorMessage.UNKNOWN_OPERATION);
    }
  }

  /**
   * Accept POST request to edit company's profile
   *
   * @param req Incomig HTTP requuest
   * @param res Outgoing HTTP response that will be generated by servlet
   */
  @Override
  public void doPost(HttpServletRequest req, HttpServletResponse res)
    throws ServletException, IOException {
    String op = req.getRequestURI();
    op = op.substring(op.lastIndexOf(req.getContextPath()) + req.getContextPath().length());

    HttpSession session = req.getSession();
    String email = (String) session.getAttribute("email");

    Company company = null;

    try {
      company = getCompanyFromSession(session);
    } catch (SQLException | NamingException e) {
      e.printStackTrace();
      writeErrorGuiPage(res,ErrorMessage.INTERNAL_ERROR);
    }

    switch (op){
    case "/company/profile":
      updateProfile(req, res, company);
      break;
    default:
      writeErrorGuiPage(res, ErrorMessage.UNKNOWN_OPERATION);
    }
  }

  /**
   * Extract user's email from session and search for their company
   *
   * @param session HttpSession object comig from the request
   * @return Company object if any company is found for the logged-in user
   */
  private Company getCompanyFromSession(HttpSession session) throws SQLException, NamingException {
    String email = (String) session.getAttribute("email");

    User user = null;
    Company company = null;

    UserDAO dao = new UserDAO(DataSourceProvider.getDataSource().getConnection());
    CompanyDAO cdao = new CompanyDAO(DataSourceProvider.getDataSource().getConnection());

    user = dao.getUserByEmail(email);
    dao.closeConnection();

    company = cdao.getCompanyByAdmin(user);
    cdao.closeConnection();

    return company;
  }

  private void showProfile(HttpServletRequest req, HttpServletResponse res,
                           Company company)
    throws ServletException, IOException {
    req.setAttribute("company", company);
    req.getRequestDispatcher("/jsp/company/profile.jsp")
      .forward(req, res);
  }

  /**
   * Do the actual update. New company information are stored in request,
   * since they are received through a POST request
   *
   * @param req Incomig HTTP requuest
   * @param res Outgoing HTTP response that will be generated by servlet
   * @param company The company that is going to be updated. It is already
   * extracted from session
   * @see getCompanyFromSession
   */
  private void updateProfile(HttpServletRequest req, HttpServletResponse res,
                           Company company)
    throws ServletException, IOException {
    //String name = req.getParameter("name");
    String address = req.getParameter("address");
    String lat_str = req.getParameter("lat");
    String lon_str = req.getParameter("lon");
    String phone = req.getParameter("phone");
    String email = req.getParameter("email");
    double lat;
    double lon;


    try {
      lat = Double.parseDouble(lat_str);
      lon = Double.parseDouble(lon_str);
    } catch (NumberFormatException e) {
      ErrorMessage em = ErrorMessage.INVALID_INPUT_FIELDS;
      req.setAttribute("errorMessage", em.getMessage());
      req.setAttribute("company", company);
      req.getRequestDispatcher("/jsp/company/profile.jsp")
        .forward(req, res);
      return;
    }

    Company updated = new Company(company.getName(),address, lat, lon,
                              phone, email, company.getAdminID());
    boolean ret = false;
    try {
      CompanyDAO cdao = new CompanyDAO(
        DataSourceProvider.getDataSource().getConnection()
        );
      ret = cdao.updateCompany(updated);
      cdao.closeConnection();
    }catch (SQLException | NamingException e) {
      writeErrorGuiPage(res,ErrorMessage.INTERNAL_ERROR);
    }

    if (ret) {
      ErrorMessage em = ErrorMessage.OK;
      res.sendRedirect(req.getContextPath()+"/company");

    } else {
      writeErrorGuiPage(res, ErrorMessage.INTERNAL_ERROR);
    }
  }
}
